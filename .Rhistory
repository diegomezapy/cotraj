#     sector = case_when(
#       rama_pea == 1 ~ 1,                    # Sector Primario: Agricultura, ganadería, caza y pesca
#       rama_pea == 2 | rama_pea == 4 ~ 2,     # Sector Secundario: Construcción + Industrias manufactureras
#       rama_pea %in% c(3, 5, 6, 7, 8) ~ 3,   # Sector Terciario: Resto
#       rama_pea == 99 ~ 99,                  # No reportado
#       TRUE ~ NA_real_                      # Asignar NA para otros valores
#     ),
#
# situacionlab = case_when(
#     pead == 1 ~ "Otros ocupados",
#     pead == 2 ~ "Desocupados de 2ª ó más veces",
#     pead == 3 ~ "Inactivos",
#     pead == 4 ~ "Subocup. Visible",
#     pead == 6 ~ "Desocupados de 1ª vez",
#     pead == 9 ~ "NR", # No Responde
#     TRUE ~ as.character(pead) # Manejo de valores inesperados
#   ),
#
#
#
# situacionlab2 = case_when(
#     peaa == 1 ~ "Ocupados",
#     peaa == 2 ~ "Desocupados",
#     peaa == 3 ~ "Inactivos",
#     peaa == 9 ~ "NR",
#       TRUE ~ as.character(peaa)
#   ),
#
# informalidaddesc = case_when(
#     informalidad == 1 ~ "Ocupados informales no agropecuarios",
#     informalidad == 2 ~ "Ocupados formales no agropecuarios",
#     informalidad == 9 ~ "No Disponible",
#           TRUE ~ as.character(informalidad)
#   ),
#
# trimestredesc = case_when(
#     trimestre == 1 ~ "2022Trim1",
#     trimestre == 2 ~ "2022Trim2",
#     trimestre == 3 ~ "2022Trim3",
#     trimestre == 4 ~ "2022Trim4",
#     trimestre == 5 ~ "2023Trim1",
#     trimestre == 6 ~ "2023Trim2",
#     trimestre == 7 ~ "2023Trim3",
#     trimestre == 8 ~ "2023Trim4",
#               TRUE ~ as.character(trimestre)
#   ),
#
# edadquinquenal = case_when(
#     p02 >= 0 & p02 <= 4 ~ "0 a 4",
#     p02 >= 5 & p02 <= 9 ~ "5 a 9",
#     p02 >= 10 & p02 <= 14 ~ "10 a 14",
#     p02 >= 15 & p02 <= 19 ~ "15 a 19",
#     p02 >= 20 & p02 <= 24 ~ "20 a 24",
#     p02 >= 25 & p02 <= 29 ~ "25 a 29",
#     p02 >= 30 & p02 <= 34 ~ "30 a 34",
#     p02 >= 35 & p02 <= 39 ~ "35 a 39",
#     p02 >= 40 & p02 <= 44 ~ "40 a 44",
#     p02 >= 45 & p02 <= 49 ~ "45 a 49",
#     p02 >= 50 & p02 <= 54 ~ "50 a 54",
#     p02 >= 55 & p02 <= 59 ~ "55 a 59",
#     p02 >= 60 & p02 <= 64 ~ "60 a 64",
#     p02 >= 65 & p02 <= 69 ~ "65 a 69",
#     p02 >= 70 & p02 <= 74 ~ "70 a 74",
#     p02 >= 75 & p02 <= 79 ~ "75 a 79",
#     p02 >= 80 & p02 <= 84 ~ "80 a 84",
#                   TRUE ~ "85 y más"
#
# ),
#
# edaddecenio = case_when(
#     p02 >= 0 & p02 <= 9 ~ "0 a 9",
#     p02 >= 10 & p02 <= 19 ~ "10 a 19",
#     p02 >= 20 & p02 <= 29 ~ "20 a 29",
#     p02 >= 30 & p02 <= 39 ~ "30 a 39",
#     p02 >= 40 & p02 <= 49 ~ "40 a 49",
#     p02 >= 50 & p02 <= 59 ~ "50 a 59",
#     p02 >= 60 & p02 <= 69 ~ "60 a 69",
#     p02 >= 70 & p02 <= 79 ~ "70 a 79",
#     p02 >= 80 & p02 <= 89 ~ "80 a 89",
#                   TRUE ~ "90 y más"
#
#   ),
#
# tramoedad = case_when(
#     p02 >= 0 & p02 <= 13 ~ "Niños",
#     p02 >= 14 & p02 <= 29 ~ "Jóvenes",
#     p02 >= 30 & p02 <= 59 ~ "Adultos",
#     TRUE ~ "Adultos mayores",
#                           TRUE ~ as.character(p02)
#   ),
#
# tramoedad2 = case_when(
#     p02 >= 0 & p02 <= 13 ~ "Niños",
#     p02 >= 14 & p02 <= 29 ~ "Jóvenes",
#     p02 >= 30 & p02 <= 64 ~ "Adultos",
#     TRUE ~ "Adultos mayores",
#                           TRUE ~ as.character(p02)
#   ),
#
# nivelest = case_when(
#     anioest == 0 ~ "Sin instrucción",
#     anioest >= 1 & anioest <= 6 ~  "Primaria incompleta",
#     anioest >= 7 & anioest <= 12 ~"Primaria completa",
#     anioest >= 13 & anioest <= 18 ~ "Secundaria completa" ,
#     anioest == 99 ~  "No disponible",
#                           TRUE ~ as.character(anioest)
#   ),
#
# nivelest2 = case_when(
#     anioest == 0 ~ "Sin instrucción",
#     anioest >= 1 & anioest <= 6 ~  "1 a 6 años",
#     anioest >= 7 & anioest <= 12 ~ "7 a 12 años",
#     anioest >= 13 & anioest <= 18 ~ "13 y más" ,
#     anioest == 99 ~  "No disponible",
#                           TRUE ~ as.character(anioest)
#   ),
#
# aportacajajub=case_when(
#   b10== 1 ~ "Sí cotiza",
#     b10 == 6  ~ "No cotiza",
#     anioest == 99 ~  "No responde"
# ),
#     ingoc1SMLtramo = ifelse(e01aimde < 0.90 * sml, 0,
#       ifelse(e01aimde >= 0.90 * sml & e01aimde <= 1.1 * sml, 1,
#         ifelse(e01aimde > 1.1 * sml, 2, NA)
#       )),
#
#     ingoc1SML_cat = factor(ingoc1SMLtramo,
#       levels = 0:2,
#       labels = c(
#         "Menos de 1 SML",
#         "1 SML",
#         "Más de 1"
#       )
#     )
#   )
#
#
# ephcanurec$sector = factor(ephcanurec$sector, levels = c(1, 2, 3, 99), labels = c("Primario", "Secundario", "Terciario", "No disponible"))
#
# write.csv(ephcanurec, "G:/Mi unidad/adultomayor/ephcanurec.csv", row.names = FALSE)
# Cargar la base de datos
ephcanurec <- read.csv2("G:/Mi unidad/adultomayor/ephcanurec.csv", sep=",")
table(ephcanurec$edadquinquenal)
# Filtros
data <- ephcanurec%>%
filter(p02 >= 60,
#anioes debe ser distitno de 99
anioest < 99,
p09 %in% c(1, 2, 3,4,5, 6),
peaa %in% c(1, 2, 3),
anio %in% c(2022, 2023, 2024)
)
table(data$peaa)
# Variable dependiente
data <- data %>%
mutate(adma = ifelse(peaa == 1, 1, 0), # 1 = Inactivo, 0 = Activo
estcivil = ifelse(p09 %in% c(1,2), 1, 2)) # 1 = Casado/Unido, 2 = Soltero)
# Etiquetas (opcional, para tablas)
data$adma <- factor(data$adma, labels = c("No sigue ocupado", "Sigue ocupado"))
data$estcivil <- factor(data$estcivil, labels = c("Casado/Unido", "Soltero"))
data$nivelest <- factor(data$nivelest, labels = c("Sin instrucción","Primaria incompleta","Primaria completa", "Secundaria completa"))
data$edadquinquenal <- factor(data$edadquinquenal, labels = c("60 a 64", "65 a 69", "70 a 74", "75 a 79", "80 a 84", "85 y más"))
data$p06 <- factor(data$p06, labels = c("Hombre", "Mujer"))
data$area <- factor(data$area, labels = c("Urbano", "Rural"))
data$pobnopoi <- factor(data$pobnopoi, labels = c("Población no pobre", "Población pobre"))
data$sector <- factor(data$sector, labels = c("Sector privado", "Sector público", "Otros"))
data$anio <- factor(data$anio, labels = c("2022", "2023", "2024"))
table(data$adma)
# Tabla edad por actividad
data %>%
group_by(adma) %>%
summarise(mean_edad = mean(p02), sd_edad = sd(p02), min_edad = min(p02), max_edad = max(p02), N = n())
# Tabla cruzada actividad x estado civil
tabyl(data, adma, estcivil) %>% adorn_percentages("row") %>% adorn_pct_formatting()
# Histograma de edad por actividad
ggplot(data, aes(x = p02, fill = adma)) +
geom_histogram(position = "dodge", bins = 15) +
facet_wrap(~adma) +
labs(title = "Distribución de Edad por Estado de Actividad", x = "Edad", y = "Frecuencia")
# Gráfico de barras actividad por estado civil
ggplot(data, aes(x = estcivil, fill = adma)) +
geom_bar(position = "dodge") +
labs(title = "Actividad por Estado Civil", x = "Estado Civil", y = "Frecuencia")
library(survey)
library(effects)
# 1) Asegurarse de que las variables sean factors en el data frame de 2024
data24 <- data %>%
filter(anio == 2024) %>%
mutate(
tramoedad      = factor(edadquinquenal),
factorexpand=as.numeric(fex2022),
p06      = factor(p06, labels = c("Hombres","Mujeres")),
area     = factor(area, labels = c("Urbano","Rural")),
nivelest = factor(nivelest),
pobnopoi = factor(pobnopoi)
)
# 2) Redefinir el diseño con fex como peso
des24 <- svydesign(
ids     = ~upm,
strata  = ~area,
weights = ~factorexpand,
data    = data24,
nest    = TRUE
)
# 3) Ajustar el modelo con interacción (sin factor() en la fórmula)
fit_inter <- svyglm(
adma ~ tramoedad + p06 + area + nivelest * estcivil + pobnopoi,
design = des24,
family = quasibinomial()
)
library(effects)
eff <- allEffects(fit_inter)
plot(eff[["nivelest:estcivil"]],
main      = "Interacción: Nivel educativo × Estado civil",
multiline = TRUE)
plot(eff[["tramoedad"]],
main      = "Efecto de Edad (gq2)",
multiline = TRUE)
library(effects)
# 1) Extraer lista de efectos
eff_list <- allEffects(fit_inter)
# 2) Paleta y grosor de línea
palette_cols <- c("steelblue", "firebrick")
line_width   <- 2
# 3) Parámetros gráficos: un sólo plot por ventana
old_par <- par(no.readonly = TRUE)
on.exit(par(old_par))
par(mfrow = c(1,1), mar = c(4,4,2,1))
# 4) Bucle para graficar cada efecto por separado
for (nm in names(eff_list)) {
ef <- eff_list[[nm]]
# Etiqueta X según efecto
xlab <- switch(nm,
gq2                 = "Grupo etario (años)",
p06                 = "Sexo",
area                = "Zona",
pobnopoi            = "Condición socioeconómica",
nivelest            = "Nivel educativo",
estcivil            = "Estado civil",
nm
)
# Título automático
main_tit <- paste0("Efecto — ", gsub(":", " × ", nm))
# 5) Graficar sin ambigüedad en 'colors'
g= plot(ef,
multiline = TRUE,
ci.style  = "bands",
colors    = palette_cols,
lwd       = line_width,
xlab      = xlab,
ylab      = "Probabilidad de inactividad",
main      = main_tit)
}
g
names(data24)
library(dplyr)
# 0) Asegúrate de que p02 sea numérico
if (!is.numeric(data24$p02)) {
data24 <- data24 %>%
mutate(p02 = as.numeric(as.character(p02)))
}
# 1) Definir breaks y labels
breaks <- c(seq(0, 80, by = 5), Inf)
labels <- c(
paste0(seq(0, 75, by = 5), " a ", seq(4, 79, by = 5)),
"80 y más"
)
# breaks tiene longitud 18 → 17 intervalos
# labels tiene longitud 17
# 2) Crear gq2
data24 <- data24 %>%
mutate(
gq2 = cut(
p02,
breaks = breaks,
labels = labels,
right = FALSE,
include.lowest = TRUE
)
)
# 3) Comprueba que hayas creado 17 niveles
levels(data24$gq2)
library(survey)
# Asegúrate de que factorexpand sea numérico
data24$factorexpand <- as.numeric(data24$factorexpand)
# 4) Redefinir el diseño
des24 <- svydesign(
ids     = ~upm,
strata  = ~area,
weights = ~factorexpand,
data    = data24,
nest    = TRUE
)
# 5) Ajustes desagregados por género
for (sexo in levels(data24$p06)) {
cat("\n=== Género:", sexo, "===\n")
fit_gen <- svyglm(
adma ~ gq2 + area + nivelest + pobnopoi + estcivil,
design = des24,
family = quasibinomial(),
subset = (p06 == sexo)
)
print(summary(fit_gen))
}
unlink("D:/OneDrive/VMGWconsultoria/JyP2024/gestiondatosJyP_cache", recursive = TRUE)
knit_with_parameters("D:/OneDrive/VMGWconsultoria/JyP2024/gestiondatosJyP.Rmd")
# ────────────────────────────────────────────────────────────────
# Configuración general y paquetes
# ────────────────────────────────────────────────────────────────
libs <- c(
"tidyverse", "sf", "spdep", "spatialreg",      # SDM
"GWmodel",   "tmap", "knitr", "readxl",        # GWR y utils
"broom", "patchwork"
)
inst <- libs[!libs %in% installed.packages()[,1]]
if(length(inst)) install.packages(inst)
invisible(lapply(libs, library, character.only = TRUE))
options(tmap.mode = "plot", scipen = 999, digits = 4)
# ─────── Rutas (ajusta a tu disco) ──────────────────────────────
data_dir <- "G:/Mi unidad/CAN2022"
dicc_xlsx <- file.path(data_dir, "Diccionario de Datos_Producto 2 - Microdatos anonimizados.xlsx")
csv_can   <- file.path(data_dir, "BASE_CAN2022_DATOS_GENERALES_P2.csv")
shp_file  <- file.path(data_dir, "paraguay", "gadm40_PRY_2.shp")
# Shapefile distritos
shp <- st_read(shp_file, quiet = TRUE) %>% st_make_valid()
# Microdatos CAN 2022
can <- read_delim(csv_can, delim = ",", show_col_types = FALSE)
can <- can %>%
mutate(
DSTO_PROC     = as.integer(DSTO_PROC),
DPTO_PROC     = as.integer(DPTO_PROC),
distrito      = recode(DSTO_PROC, !!!distrito_labels),
departamento  = recode(as.character(DPTO_PROC), !!!dept_map),
# Variable dependiente
agriprec      = if_else(p21016_sn == 1, 1, 0),
# Covariables
ln_supag      = log(p10001 + 1),
credito       = if_else(p23200_sn == 1, 1, 0),
asistencia    = if_else(p23100_sn == 1, 1, 0),
sem_hibrida   = if_else(p24000_1_sn == 1, 1, 0),
vende         = if_else(p28100_sn == 1, 1, 0),
riego         = if_else(p21018_sn == 1, 1, 0)
)
# Diversificación de cultivos
cult_cols <- grep("^(p12000|p14000).*_total$", names(can), value = TRUE)
can$cultivos <- rowSums(can[cult_cols] > 0, na.rm = TRUE)
distrital <- can %>%
group_by(DSTO_PROC) %>%
summarise(
agriprec   = mean(agriprec),
ln_supag   = mean(ln_supag),
credito    = mean(credito),
asistencia = mean(asistencia),
sem_hibrida= mean(sem_hibrida),
vende      = mean(vende),
riego      = mean(riego),
cultivos   = mean(cultivos),
.groups = "drop"
)
# ────────────────────────────────────────────────────────────────
# Configuración general y paquetes
# ────────────────────────────────────────────────────────────────
libs <- c(
"tidyverse", "sf", "spdep", "spatialreg",      # SDM
"GWmodel",   "tmap", "knitr", "readxl",        # GWR y utils
"broom", "patchwork"
)
inst <- libs[!libs %in% installed.packages()[,1]]
if(length(inst)) install.packages(inst)
invisible(lapply(libs, library, character.only = TRUE))
options(tmap.mode = "plot", scipen = 999, digits = 4)
# ─────── Rutas (ajusta a tu disco) ──────────────────────────────
data_dir <- "G:/Mi unidad/CAN2022"
dicc_xlsx <- file.path(data_dir, "Diccionario de Datos_Producto 2 - Microdatos anonimizados.xlsx")
csv_can   <- file.path(data_dir, "DATOS GENERALES_P2.xlsx")  # Usamos Excel ahora
shp_file  <- file.path(data_dir, "paraguay", "gadm40_PRY_2.shp")
# Shapefile distritos
tmp_shp <- st_read(shp_file, quiet = TRUE)
shp <- st_make_valid(tmp_shp)
# Microdatos CAN 2022 desde Excel
can <- read_excel(csv_can)
# Revisar tipos
str(can)
# Convertir a integer/clasificar
can <- can %>%
mutate(
DSTO_PROC     = as.integer(DSTO_PROC),
DPTO_PROC     = as.integer(DPTO_PROC),
# Definir variable dependiente (Adopción AP)
agriprec      = if_else(p21016_sn == 1, 1, 0),
# Covariables
ln_supag      = log(p10001 + 1),
credito       = as.integer(p23200_sn == 1),
asistencia    = as.integer(p23100_sn == 1),
sem_hibrida   = as.integer(p24000_1_sn == 1),
vende         = as.integer(p28100_sn == 1),
riego         = as.integer(p21018_sn == 1)
)
# Diversificación de cultivos (asegúrate de que columnas existen)
cult_cols <- grep("^(p12000|p14000).*_total$", names(can), value = TRUE)
if(length(cult_cols) > 0) {
can <- can %>%
mutate(cultivos = rowSums(select(., all_of(cult_cols)) > 0, na.rm = TRUE))
} else {
can$cultivos <- 0
}
# Re-codificar etiquetas de distrito/ departamento
dep_map <- c(
`0`  = "Asunción",  `1`  = "Concepción", `2`  = "San Pedro",  `3`  = "Cordillera",
`4`  = "Guairá",    `5`  = "Caaguazú",  `6`  = "Caazapá",    `7`  = "Itapúa",
`8`  = "Misiones",  `9`  = "Paraguarí", `10` = "Alto Paraná",`11` = "Central",
`12` = "Ñeembucú",  `13` = "Amambay",   `14` = "Canindeyú",  `15` = "Presidente Hayes",
`16` = "Boquerón",  `17` = "Alto Paraguay"
)
distrito_labels <- list(
`0`   = "Asunción", `101` = "Concepción",  `102` = "Belén", `103` = "Horqueta",
# (incluye el resto de códigos según el diccionario)
`208` = "San Estanislao", # ... etc.
`1503` = "Puerto Pinasco", `1604` = "Filadelfia", `1705` = "Carmelo Peralta"
)
can <- can %>%
mutate(
distrito     = recode(DSTO_PROC, !!!distrito_labels),
departamento = recode(as.character(DPTO_PROC), !!!dep_map)
)
# Asegurarnos de que agriprec existe antes de agrupar
glimpse(can)
# Realizar agregación distrital
# Filtrar casos sin información básica
can_f <- can %>% filter(!is.na(DSTO_PROC) & !is.na(agriprec))
# Agrupar
if("agriprec" %in% names(can_f)) {
distrital <- can_f %>%
group_by(DSTO_PROC) %>%
summarise(
agriprec   = mean(agriprec, na.rm = TRUE),
ln_supag   = mean(ln_supag, na.rm = TRUE),
credito    = mean(credito, na.rm = TRUE),
asistencia = mean(asistencia, na.rm = TRUE),
sem_hibrida= mean(sem_hibrida, na.rm = TRUE),
vende      = mean(vende, na.rm = TRUE),
riego      = mean(riego, na.rm = TRUE),
cultivos   = mean(cultivos, na.rm = TRUE)
) %>%
ungroup()
} else {
stop("Error: La variable 'agriprec' no existe. Revisa el paso de creación.")
}
# Preparar shapefile con código DSTO_PROC
shp_d <- shp %>%
mutate(DSTO_PROC = as.integer(str_extract(ID_2, "\\d+$"))) %>%
left_join(distrital, by = "DSTO_PROC") %>%
filter(!is.na(agriprec))
# Verificar resultado
print(head(shp_d))
coords  <- st_coordinates(st_centroid(shp_d))
nb_k5   <- spdep::knn2nb(spdep::knearneigh(coords, k = 5))
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("usethis", "devtools"))
usethis::create_package("~/cotraj")   # ‘cotraj’ = cotización + trajectories
usethis::use_git()                    # initialise git repo
# Entra al directorio del paquete:
setwd(paquete_dir)
# Inicializar Git dentro de la carpeta (si usas control de versiones):
use_git()
# Añadir README en R Markdown:
use_readme_rmd()
# Usar licencia MIT (o la que prefieras):
use_mit_license("Diego B. Meza")
# Habilitar roxygen Markdown:
use_roxygen_md()
# Crear carpeta de tests automáticos:
use_testthat()
# Ajusta la carpeta base a tu conveniencia:
paquete_dir <- "~/R/cotraj"
create_package(path = paquete_dir)
# Entra al directorio del paquete:
setwd(paquete_dir)
# Inicializar Git dentro de la carpeta (si usas control de versiones):
use_git()
# Añadir README en R Markdown:
use_readme_rmd()
# Usar licencia MIT (o la que prefieras):
use_mit_license("Diego B. Meza")
# Habilitar roxygen Markdown:
use_roxygen_md()
# Crear carpeta de tests automáticos:
use_testthat()
# Ajusta la carpeta base a tu conveniencia:
paquete_dir <- "~/R/cotraj"
# Entra al directorio del paquete:
setwd(paquete_dir)
# Inicializar Git dentro de la carpeta (si usas control de versiones):
use_git()
# Añadir README en R Markdown:
use_readme_rmd()
# Usar licencia MIT (o la que prefieras):
use_mit_license("Diego B. Meza")
# Habilitar roxygen Markdown:
use_roxygen_md()
# Crear carpeta de tests automáticos:
use_testthat()
print(summary(fit_gen))
abort
devtools::test()
setwd(C:\Users\dmeza\cotraj)
setwd("C:\Users\dmeza\cotraj")
setwd("C:/Users/dmeza/cotraj")
devtools::test()
devtools::test()
usethis::create_package(".../cotraj")
